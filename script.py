from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
import time

# Initialisation du driver
driver = webdriver.Chrome()

# Ouverture de la page
driver.get("http://127.0.0.1:5500/index.html")

# Attente que l'√©l√©ment "tetris" soit visible
wait = WebDriverWait(driver, 10)
element = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "tetris")))

print("‚úÖ tetris trouv√©")

# Attendre que le bouton soit visible et cliquable
tetris_button = wait.until(EC.presence_of_element_located((By.ID, "tetrisButton")))
print("‚úÖ bouton tetris trouv√©")
# V√©rifier que le bouton est bien affich√©
assert tetris_button.is_displayed(), "‚ùå Le bouton n'est pas visible !"

# Simuler un clic avec ActionChains
actions = ActionChains(driver)
actions.move_to_element(tetris_button).click().perform()

print("‚úÖ Le bouton pour ouvrir tetris a √©t√© cliqu√©")

time.sleep(3)

# V√©rifier que la modal est bien affich√©e
modal_left = wait.until(EC.presence_of_element_located((By.ID, "modal-left")))
driver.execute_script("document.getElementById('modal-left').style.visibility = 'visible';")
html = driver.page_source
if "modal-left" in html:
    print("‚úÖ La modal est bien dans le DOM mais peut-√™tre cach√©e")
else:
    print("‚ùå La modal n'est pas pr√©sente dans le DOM")


assert modal_left.is_displayed(), "‚ùå La modal ne s'est pas ouverte !"
print("‚úÖ Le modal est ouvert avec succ√®s")
modal = modal_left.get_attribute("innerHTML")

# Afficher le contenu
print("üìå Contenu de la modale :\n", modal)

#Afficher modalContent

# Attendre que la modale s'affiche
wait.until(lambda d: "show" in d.find_element(By.ID, "modal-left").get_attribute("class"))
print("‚úÖ La modale est visible")

# Attendre que modal-content soit rempli
wait.until(lambda d: d.find_element(By.ID, "modal-content").get_attribute("innerHTML").strip() != "")
print("‚úÖ `modal-content` a √©t√© rempli avec succ√®s.")

# R√©cup√©rer et afficher le contenu HTML de la modale
modal_content_html = driver.find_element(By.ID, "modal-content").get_attribute("innerHTML")
print("üìå Contenu de modal-content :\n", modal_content_html)

# V√©rifier si un canvas est pr√©sent
canvas = driver.find_elements(By.TAG_NAME, "canvas")
if canvas:
    print("‚úÖ Un canvas a bien √©t√© d√©tect√© dans la modale !")
else:
    print("‚ùå Aucun canvas trouv√© dans modal-content.")

# Fermer le navigateur apr√®s le test
driver.quit()